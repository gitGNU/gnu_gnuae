// 
//   Copyright (C) 2005, 2006, 2007, 2008, 2009 Free Software Foundation, Inc.
// 
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation; either version 3 of the License, or
// (at your option) any later version.
// 
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
// 
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA

// This is generated by autoconf
#include "config.h"

#include <vector>
#include <string>
#include <iostream>
#include <cstdlib>
#include <cmath>

#include "log.h"
#include "Inverters.h"
#include "Chargers.h"
#include "Database.h"
#include "gnuae.h"

using namespace std;

namespace gnuae {

static LogFile& dbglogfile = LogFile::getDefaultInstance();
static GnuAE& gdata = GnuAE::getDefaultInstance();

#if 0
extern "C" {
  
  inverter_t inverters[] = {
    { "None",                          "",    0.0,    0,  0,  NO },
    { "Trace 812",              "Xantrex",  650.0,  575, 12,  NO },
    { "Trace DR1512",           "Xantrex",  950.0, 1500, 12,  NO },
    { "Trace DR2412",           "Xantrex", 1285.0, 2400, 12,  NO },
    { "Trace 2512",             "Xantrex", 1575.0, 2500, 12,  NO },
    { "Trace SW2512",           "Xantrex", 2485.0, 2500, 12, YES },
    { "Trace 724",              "Xantrex",  725.0,  425, 24,  NO },
    { "Trace DR1524",           "Xantrex",  895.0, 1500, 24,  NO },
    { "Trace DR2424",           "Xantrex", 1225.0, 2400, 24,  NO },
    { "Trace 2232",             "Xantrex", 1475.0, 2200, 24,  NO },
    { "Trace 2536",             "Xantrex", 1900.0, 2500, 24,  NO },
    { "Trace 2548",             "Xantrex", 1995.0, 2500, 24,  NO },
    { "Trace SW4024",           "Xantrex", 3185.0, 4000, 24, YES },
    { "Trace SW4048",           "Xantrex", 3185.0, 4000, 48, YES },
    { "Trace SW5048",           "Xantrex", 3680.0, 5500, 48, YES },
    { "Heart Freedom 10",       "Xantrex", 1095.0, 1000, 24,  NO },
    { "Heart Freedom 20",       "Xantrex", 1095.0, 2000, 24,  NO },
    { "Heart Freedom 25",       "Xantrex", 1655.0, 2500, 24,  NO },
    { "Heart HF-12-600" ,       "Xantrex",  600.0,  300, 24,  NO },
    { 0,                                0,      0.,    0, 0,  NO }
  };
};
#endif

Inverters::Inverters()
{
}

Inverters::~Inverters()
{
}

int
Inverters::readCSV(std::string)
{
    DEBUGLOG_REPORT_FUNCTION;
}

int
Inverters::readSQL(Database &db)
{
    // DEBUGLOG_REPORT_FUNCTION;
    if (db.getState() == Database::DBOPENED) {
	string query = "SELECT * from inverters";
	vector<vector<string> > *result = db.queryResults(query);
	vector<vector<string> >::iterator it;
	for (it=result->begin(); it!=result->end(); ++it) {
	    inverter_t *thisinvert = new inverter_t;
	    vector<string> &row = *it;
	    if (!row[1].empty()) {
		thisinvert->name = strdup(row[1].c_str());
	    }
	    if (!row[2].empty()) {
		thisinvert->manufacturer = strdup(row[2].c_str());
	    }
	    // thisinvert->price = strtof(row[3].c_str(), NULL);
	    thisinvert->wattage = strtol(row[4].c_str(), NULL, 0);
	    thisinvert->voltage = strtol(row[5].c_str(), NULL, 0);
	    // thisinvert->LCD = static_cast<feature_e>(strtol(row[6].c_str(), NULL, 0));
	    // thisinvert->group = static_cast<loadgroup>(strtol(row[4].c_str(), NULL, 0));
	    // thisinvert->voltage = strtof(row[5].c_str(), NULL);
	    // thisinvert->wattage = strtof(row[6].c_str(), NULL);
	    // thisinvert->amperage = strtof(row[7].c_str(), NULL);
	    addEntry(thisinvert);
	}
	delete result;
    }

    dbglogfile << "Loaded " << dataSize() << " records from inverters table." << endl;

    return dataSize();
}

void
Inverters::dump()
{
    // DEBUGLOG_REPORT_FUNCTION;
    if (!dataSize()) {
	cerr << "No Inverter data in memory." << endl;
    } else {
	vector<string>::iterator it;
	auto_ptr<vector<string> > loadnames = dataNames();
	for (it = loadnames->begin(); it != loadnames->end(); it++) {
	    dump(findEntry(*it));
	}
    }
}

void
Inverters::dump(inverter_t *it)
{
    // DEBUGLOG_REPORT_FUNCTION;
    if (it) {
	cerr << "Inverter Name is: " << it->name;
	cerr << ", Manufacturer is: " << it->manufacturer << endl;
	// cerr << "Price is" << it->price << endl;
	cerr << "\tWattage is:" << it->wattage
	    << ", Voltage is:" << it->voltage << endl;
    }
}

} // end of gnuae namespace

// local Variables:
// mode: C++
// indent-tabs-mode: t
// End:
