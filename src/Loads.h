// 
//   Copyright (C) 2003 Free Software Foundation, Inc.
//
//   This program is free software; you can redistribute it and/or modify
//   it under the terms of the GNU General Public License as published by
//   the Free Software Foundation; either version 2 of the License, or
//   (at your option) any later version.
//
//   This program is distributed in the hope that it will be useful,
//   but WITHOUT ANY WARRANTY; without even the implied warranty of
//   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//   GNU General Public License for more details.
//
//   You should have received a copy of the GNU General Public License
//   along with this program; if not, write to the Free Software
//   Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
//

#ifndef __LOADS_H__
#define __LOADS_H__

// This is generated by autoconf
#include "config.h"

enum loadtype  { NOLOAD, AC, DC };
enum activedev { INACTIVE, ACTIVE };
enum loadgroup { NOGROUP, HOUSEHOLD, TOOLS, KITCHEN, DIGITAL };

typedef struct load 
{
  char  *name;
  char  *description;
  enum loadtype type;
  enum loadgroup group;
  double voltage;
  double wattage;
  double amperage;
  double hours;
  double minutes;
  double days;           // the number of days per week this device is used
  int    quantity;
  int    active;
} load_t;

extern const char *load_strs[];
extern const char *loadgroup_strs[];

#ifdef __cplusplus

#include <map>
#include <vector>
#include <string>
#include "DataType.h"

namespace gnuae
{
  class Load: public DataTypeMethods<load_t>
    {
    public:
      Load(void);
      ~Load(void);
      void dump(void);
      void dump(load_t *load);
      void writeLoads(std::string);
      int readLoadsCSV(std::string);
      // Calculated Array values
      int calcArrayAmps(void);
      int calcArraySeries(void);
      int calcArrayParallel(void);
      int calcArrayTotal(void);

      // Calculated Battery values
      int calcBatteryAmps(void);
      int calcBatterySeries(void);
      int calcBatteryParallel(void);
      int calcBatteryTotal(void);

      // These are the calculated Values
      double calcWatts(load_t *load);
      double calcWatts(void);
      double calcAmps(void);
      double calcAmps(load_t *load);
      double calcHoursDaily(void);
      double calcHoursDaily(load_t *load);
      std::vector<std::string> *names(void);
    private:
      bool _debug;
    };
};

extern "C" {
#else
// C API goes here
  extern load_t loads[];

  int load_size(void);

  // Add a new load into the database
  void add_load(load_t *load);
  // Edit an existing load entry in the database
  void edit_load(load_t *load);

  int load_names(const char **names);
  load_t *find_load(const char *name);

  int calc_array_amps(void);
  int calc_array_series(void);
  int calc_array_parallel(void);
  int calc_array_total(void);

  int calc_battery_amps(void);
  int calc_battery_series(void);
  int calc_battery_parallel(void);
  int calc_battery_total(void);

  double calc_watts_total(void);
  double calc_watts(load_t *load);
  double calc_amps_total(void);
  double calc_amps(load_t *load);

  double calc_hours_daily_total(void);
  double calc_hours_daily(load_t *load);

  void dump_loads(void);
  void dump_load(load_t *load);
  void write_loads(const char *filespec);
  int read_loads_CSV(const char *filespec);
#endif
  
#ifdef __cplusplus
}
#endif
 
// __LOADS_H__
#endif
