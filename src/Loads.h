// 
//   Copyright (C) 2003, 2004, 2005, 2006, 2007, 2008,
//              2009 Free Software Foundation, Inc.
// 
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation; either version 3 of the License, or
// (at your option) any later version.
// 
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
// 
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA

#ifndef __LOADS_H__
#define __LOADS_H__

// This is generated by autoconf
#include "config.h"

enum loadtype  { NOLOAD, AC, DC };
enum activedev { INACTIVE, ACTIVE };
enum loadgroup { NOGROUP, HOUSEHOLD, TOOLS, KITCHEN, DIGITAL };

typedef struct load {
  char  *name;
  char  *description;
  enum loadtype type;
  enum loadgroup group;
  double voltage;
  double wattage;
  double amperage;
} load_t;

#ifdef __cplusplus

extern "C" {
extern const char *load_strs[];
extern const char *loadgroup_strs[];
}

#include <map>
#include <vector>
#include <string>
#include "DataType.h"
#include "Database.h"

namespace gnuae {

class Loads: public DataTypeMethods<load_t> {
public:
    Loads(void);
    ~Loads(void);
    void writeLoads(std::string);
    int readLoadsCSV();
    int readLoadsCSV(std::string);
    int readLoadsSQL(Database &db);
    
    // Calculated Array values
    int calcArrayAmps(void);
    int calcArraySeries(void);
    int calcArrayParallel(void);
    int calcArrayTotal(void);
    
    // Calculated Battery values
    int calcBatteryAmps(void);
    int calcBatterySeries(void);
    int calcBatteryParallel(void);
    int calcBatteryTotal(void);

    // These are the calculated Values
    double calcWatts(load_t *load);
    double calcWatts(void);
    double calcAmps(void);
    double calcAmps(load_t *load);
    double calcHoursDaily(void);
    double calcHoursDaily(load_t *load);
    std::vector<std::string> *names(void);

    // Dump data of course
    void dump(void);
    void dump(load_t *load);
private:
    bool _debug;
};
} // end of gnuae namespace

extern "C" {
#else
// C API goes here
  extern load_t loads[];

  int load_size(void);

  // Add a new load into the database
  void add_load(load_t *load);
  // Edit an existing load entry in the database
  void edit_load(load_t *load);

  int load_names(const char **names);
  load_t *find_load(const char *name);

  int calc_array_amps(void);
  int calc_array_series(void);
  int calc_array_parallel(void);
  int calc_array_total(void);

  int calc_battery_amps(void);
  int calc_battery_series(void);
  int calc_battery_parallel(void);
  int calc_battery_total(void);

  double calc_watts_total(void);
  double calc_watts(load_t *load);
  double calc_amps_total(void);
  double calc_amps(load_t *load);

  double calc_hours_daily_total(void);
  double calc_hours_daily(load_t *load);

  void dump_loads(void);
  void dump_load(load_t *load);
  void write_loads(const char *filespec);
  int read_loads_CSV(const char *filespec);
#endif
  
#ifdef __cplusplus
}
#endif
 
// __LOADS_H__
#endif

// local Variables:
// mode: C++
// indent-tabs-mode: t
// End:
