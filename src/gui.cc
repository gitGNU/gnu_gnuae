// 
//   Copyright (C) 2009 Free Software Foundation, Inc.
// 
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation; either version 3 of the License, or
// (at your option) any later version.
// 
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
// 
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA

// This is generated by autoconf
#include "config.h"

#include <iostream>
#include <memory>
#include <cstdlib>

#include "gnuae.h"
#include "log.h"
#include "gui.h"
#include "Database.h"

using namespace std;
using namespace gnuae;

static LogFile& dbglogfile = LogFile::getDefaultInstance();
static GnuAE& gdata = GnuAE::getDefaultInstance();

const char **
gui_list_names(const char *name)
{
    // DEBUGLOG_REPORT_FUNCTION;
    return gdata.listTableNames(name);
}

void
gui_init()
{
    // DEBUGLOG_REPORT_FUNCTION;
    gdata.openDB();
    gdata.loadData();
}

// This is only used to change the default password for testing
void
gui_init_db(const char *dbname)
{
    // DEBUGLOG_REPORT_FUNCTION;

    // Use the new database name for the log file.
    string db = "/tmp/" ;
    db += dbname;
    db += "-dbg.log";

    // Dump all debug output in HTML, so it looks ok in a browser.
    dbglogfile.setHTMLMode(true);
    // make lots of noise.
    dbglogfile.set_verbosity();
    // Reopen the debug log under the new name.
    dbglogfile.Open(db.c_str());
    
    // disconnect the existing database before choosing another.
    gdata.closeDB();
    gdata.dbNameSet(dbname);

    gui_init();
}

long
gui_add_item(long projid, item_t *item)
{
    // DEBUGLOG_REPORT_FUNCTION;
    return gdata.addItem(projid, item);
}

// Update the data for an existing item in the profile
bool
gui_update_item(long projid, item_t *item)
{
    return gdata.updateItem(projid, item);
}

item_t *
gui_get_item(long projid, long id, const char *name)
{
    // DEBUGLOG_REPORT_FUNCTION;

    return gdata.getItem(projid, id, name);
}

// delete a load from the database
bool
gui_erase_item(long projid, long id, const char *name)
{
    // DEBUGLOG_REPORT_FUNCTION;
    return gdata.eraseItem(projid, id, name);
}

item_t **
gui_list_items()
{
    // DEBUGLOG_REPORT_FUNCTION;
    auto_ptr<vector<item_t *> > items = gdata.listItems();
    item_t **result = 0;
    int i = 0;
    if (items.get()) {
	// As the result gets freed by a C program, we have to use malloc
	// instead of new(). 
	result = new item_t *[items->size()+1];
	//result = (item_t **)std::malloc(sizeof(item_t) * items->size());
	vector<item_t *>::iterator it;
	for (it=items->begin(); it != items->end(); ++it) {
	    item_t *ti = *it;
	    result[i++] = ti;
	    // free(ti->item);
	    // free(ti->description);
	    // delete ti;
	}
    }

    // Terminate the array, since we're not using std::vector
    if (result) {
	result[i] = 0;
    }

    return result;
}

long
gui_new_project(project_t *proj)
{
    // DEBUGLOG_REPORT_FUNCTION;

    int id = gdata.newProject(proj->name, proj->description, proj->sunhours,
			      proj->windhours, proj->windspeed, proj->location,
			      proj->latitude, proj->longitude);

    proj->id = id;
    
    return id;
}

project_t *
gui_get_project(long id, const char *name)
{
    // DEBUGLOG_REPORT_FUNCTION;

    auto_ptr<project_t > tmp =  gdata.getProject(id, name);
    // As auto_ptr will delete the memory when it goes out of scope,
    // we then can't pass a pointer to the C API. Instead get the
    // address it points to, and release if from there.
    project_t *ptr = tmp.get();
    tmp.release();

    return ptr;
}

// Update an existing project
bool
gui_update_project(long id, project_t *proj)
{
    // DEBUGLOG_REPORT_FUNCTION;
    return gdata.updateProject(id, proj);
}

// delete a project from the database
bool
gui_erase_project(long id, const char *name)
{
    // DEBUGLOG_REPORT_FUNCTION;
    return gdata.eraseProject(id, name);
}

// local Variables:
// mode: C++
// indent-tabs-mode: t
// End:
