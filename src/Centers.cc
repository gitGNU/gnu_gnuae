// 
//   Copyright (C) 2003, 2004, 2005, 2006, 2007, 2008,
//              2009 Free Software Foundation, Inc.
// 
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation; either version 3 of the License, or
// (at your option) any later version.
// 
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
// 
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA

// Power Loss = Voltage drop as a percentage x load in amps
//

// This is generated by autoconf
#include "config.h"

#include <vector>
#include <string>
#include <iostream>
#include <cstdlib>
#include <cmath>

#include "Centers.h"
#include "log.h"
#include "gnuae.h"
#include "Database.h"

using namespace std;

namespace gnuae {

static LogFile& dbglogfile = LogFile::getDefaultInstance();
static GnuAE& gdata = GnuAE::getDefaultInstance();

#if 0
extern "C" {

  center_t centers[] = {
    { "None",                      "None",       0.0, 0 },
    { "Trace SW4024/S",            "Xantrax", 4995.0, 24 },
    { "Trace SW4048/S",            "Xantrax", 4995.0, 48 },
    { "Trace SW5548/S",            "Xantrax", 5695.0, 48 },
    { "Trace SW4024/D",            "Xantrax", 8995.0, 24 },
    { "Trace SW4048/D",            "Xantrax", 9137.0, 48 },
    { "Trace SW5548/D",            "Xantrax", 9999.0, 48 },
    { "Trace DR1512/S",            "Xantrax", 1979.0, 12 },
    { "Trace DR1512/D",            "Xantrax", 3637.0, 12 },
    { "Trace DR2412/S",            "Xantrax", 2295.0, 12 },
    { "Trace DR2412/D",            "Xantrax", 4337.0, 12 },
    { "Trace DR1524/S",            "Xantrax", 1879.0, 24 },
    { "Trace DR1524/D",            "Xantrax", 3529.0, 24 },
    { "Trace DR2424/S",            "Xantrax", 2295.0, 24 },
    {                0,                    0,      0,  0 }
  };
};
#endif

Centers::Centers() {

};

Centers::~Centers() {

};

int
Centers::readCSV(std::string)
{
    DEBUGLOG_REPORT_FUNCTION;
}

int
Centers::readSQL(Database &db)
{
    DEBUGLOG_REPORT_FUNCTION;
    if (db.getState() == Database::DBOPENED) {
    	string query = "SELECT * from centers";
    	vector<vector<string> > *result = db.queryResults(query);
    	vector<vector<string> >::iterator it;
    	for (it=result->begin(); it!=result->end(); ++it) {
    	    center_t *thiscent = new center_t;
    	    vector<string> &row = *it;
    	    thiscent->name = const_cast<char *>(row[1].c_str());
    	    thiscent->manufacturer = const_cast<char *>(row[2].c_str());
    	    // thiscent->price = strtof(row[3].c_str(), NULL);
    	    thiscent->voltage = strtol(row[4].c_str(), NULL, 0);
    	    addEntry(thiscent);
    	}
    }

    dbglogfile << "Loaded " << dataSize() << " records from centers table." << endl;

    return dataSize();
}

void
Centers::dump()
{
    // DEBUGLOG_REPORT_FUNCTION;
    if (!dataSize()) {
    	cerr << "No Control Center data in memory." << endl;
    } else {
    	vector<string>::iterator it;
    	vector<string> *loadnames = dataNames();
    	for (it = loadnames->begin(); it != loadnames->end(); ++it) {
    	    dump(findEntry(*it));
    	}
    }
}

void
Centers::dump(center_t *cent)
{
    // DEBUGLOG_REPORT_FUNCTION;
    cerr << "Control Center name is: " << cent->name;
    cerr << ", Manufacturer is: " << cent->manufacturer;
    cerr << ", Voltage is: " << cent->voltage << endl;
}

} // end of gnuae namespace

// local Variables:
// mode: C++
// indent-tabs-mode: t
// End:
