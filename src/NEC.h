// 
//   Copyright (C) 2003 Free Software Foundation, Inc.
//
//   This program is free software; you can redistribute it and/or modify
//   it under the terms of the GNU General Public License as published by
//   the Free Software Foundation; either version 2 of the License, or
//   (at your option) any later version.
//
//   This program is distributed in the hope that it will be useful,
//   but WITHOUT ANY WARRANTY; without even the implied warranty of
//   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//   GNU General Public License for more details.
//
//   You should have received a copy of the GNU General Public License
//   along with this program; if not, write to the Free Software
//   Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
//

#ifndef __NEC_H__
#define __NEC_H__

// This is generated by autoconf
#include "config.h"

#include "nec_tables.h"

const float ACCEPTABLE_DROP = 3.0;

const float BATTERY_RESISTANCE_12 = 0.0015;
const float BATTERY_RESISTANCE_24 = 0.0030;
const float BATTERY_RESISTANCE_48 = 0.0060;
const float BATTERY_CONTACTS      = 0.0016;
const float INVERTER_CONTACTS     = 0.0004;
const float CIRCUIT_BREAKER       = 0.0020;


#ifdef __cplusplus

#include <string>
#include <vector>
#include <map>

namespace gnuae
{  
  class NEC 
    {
    public:
      NEC(void);
      ~NEC(void);
      float fuseSize(float amperage);
      float breakerSize(float amperage);

      float ampacity(void);
      float ampacity(float amperage);

      float maxCurrent(void);
      float maxCurrent(float amps);

      float overCurrent(float amperage);
      float overCurrent(int strings, float isc);

      // Adjust the volatge based on the temperature
      float crystalCompensation(float temp);
      float crystalCompensation(float voltage, float temp);
      
      float wireDerate(int awg, float temp);
      
      float calcK(int awg, float temp);
      float calcK(int awg, float temp, bool exact);
      float calcK(int awg, float temp, wiretype_t type);
      float calcK(int awg, float temp, wiretype_t type, bool exact);
      float resistance(int awg);
      float resistance(int awg, float temperature);
      float resistance(int awg, float temperature, bool exact);
      float resistance(int awg, float temperature, wiremetal_t type);
      float resistance(int awg, float temperature, wiremetal_t type, bool exact);
      float voltDrop(int awg, int distance, float volts, float amps);
      float voltDrop(int awg, int distance, float volts, float amps, int conductors);
      float voltDrop(int awg, int distance, float volts, float amps, float temp,
                     int conductors);
      float voltDrop(int awg, int distance, float volts, float amps, float temp,
                     int conductors, wiremetal_t type);
      
      float voltLoss(int distance, int awg, float amps);
      float voltLoss(int distance, int awg, float amps, int conductors);
      float voltLoss(int distance, int awg, float amps, float temp, int conductors);
      float voltLoss(int distance, int awg, float amps, float temp, int conductors,
                     wiremetal_t type);
      int findGauge(int distance, float volts, float amps);
      int findGauge(int distance, float volts, float amps, int conductors);
      int findGauge(int distance, float volts, float amps, float temp, int conductors);
      int findGauge(int distance, float volts, float amps, float temp, float drop);
      int findGauge(int distance, float volts, float amps, float temp, float drop,
                    int conductors);
      int findGauge(int distance, float volts, float amps, float temp, float drop,
                    int conductors, wiremetal_t type);
      int findGround(float volts, float amps);
      
      float findConduit(int awg);
      float findConduit(int awg, int conductors);
      float findConduit(int awg, int conductors, wiretype_t wire,
                        conduit_type_t conduit);
      
      int awgPV2PV(int distance, float volts, float amps, float temp,
                   int conductors);
      int awgPV2Combiner(int distance, float volts, float amps, float temp,
                         int conductors);
      int awgCombiner2Charger(int distance, float volts, float amps, float temp,
                              int conductors);
      int awgWind2Charger(int distance, float volts, float amps, float temp,
                          int conductors);
      int awgCharger2Battery(int distance, float volts, float amps, float temp,
                             int conductors);
      
      int awgBattery2Inverter(int distance, float volts, float amps, float temp,
                              int conductors);

      float wireAmpacity(int awg, int temp, int conductors, bool conduit,
                         wiretype_t type);
      
      // These are just convienince methods for basic calculations
      float watts(float volts, float amps);
      float amps(float watts, float volts);
      float volts(float watts, float amps);

      float celcius(float temp);
      float farenheit(float temp);
      
      void dump(void);
      void toggleDebug(bool val);
      void toggleExact(bool val);

      // Accessors. 
      void setWireMetalTypeAsDefault(wiremetal_t x)
        {
          _wiremetal = x;
        }
      void setWireTypeAsDefault(wiretype_t x)
        {
          _wiretype = x;
        }
      
      void setConduitTypeAsDefault(conduit_type_t x)
        {
          _conduit = x;
        }
      
      void setCelciusAsDefault(void)
        {
          _celcius = true;
        }
      
      void setFarenheitAsDefault(void)
        {
          _celcius = false;
        }

      bool getTemperatureDefault(void)
        {
          return _celcius;
        }

      wiretype_t getWireTypeDefault(void)
        {
          return _wiretype;
        }
      
      wiremetal_t getWireMetalDefault(void)
        {
          return _wiremetal;
        }
      
      conduit_type_t getConduitTypeDefault(void)
        {
          return _conduit;
        }
      
    private:
      bool           _debug;
      bool           _coated;
      bool           _exact;
      bool           _celcius;
      wiretype_t     _wiretype;
      wiremetal_t    _wiremetal;
      conduit_type_t _conduit;
    };
}

extern "C" {
#else
  void nec_toggle_debug(int val);
  float nec_volt_drop(int awg, int distance, float volts, float amps,
                      float temp, int conductors);
  float nec_volt_loss(int distance, int awg, float amps, float temp,
                      int conductors);
  float nec_watts(float volts, float amps);
  float nec_amps(float watts, float volts);
  float nec_volts(float watts, float amps);
  float nec_resistance(int awg, float temp);

  float nec_wire_derate(int awg, float temp);
  float nec_ampacity(int strings, float isc);
  float nec_crystal_comp(float temp);

  float nec_over_current(int strings, float isc);
  int nec_find_gauge(int distance, float volts, float amps, float temp,
                     int conductors);
  float nec_find_conduit(int awg, int conductors, wiretype_t wire,
                         conduit_type_t conduit);
  int nec_find_ground();
  
  int nec_awg_pv2pv(int distance, float volts, float amps, float temp,
                    int conductors);
  int nec_awg_pv2combiner(int distance, float volts, float amps, float temp,
                          int conductors);
  int nec_awg_combiner2charger(int distance, float volts, float amps, float temp,
                               int conductors);
  int nec_awg_wind2charger(int distance, float volts, float amps, float temp,
                           int conductors);
  int nec_awg_charger2battery(int distance, float volts, float amps, float temp,
                              int conductors);
  
  int nec_awg_battery2inverter(int distance, float volts, float amps, float temp,
                               int conductors);  
  float nec_wire_ampacity(int awg, int temp, int conductors, int conduit,
                          wiretype_t type);
  
#endif
#ifdef __cplusplus
}
#endif

// __NEC_H__
#endif
