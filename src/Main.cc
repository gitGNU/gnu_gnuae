// 
//   Copyright (C) 2003, 2004, 2005, 2006, 2007, 2008,
//              2009 Free Software Foundation, Inc.
// 
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation; either version 3 of the License, or
// (at your option) any later version.
// 
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
// 
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA

// This is generated by autoconf
#include "config.h"

#include <string>
#include <cstdlib>
#include <cstdio>
#include <getopt.h>
#include <iostream>

#include "PVPanel.h"

using namespace std;

static void usage (const char *);


main(int argc, char **argv) {
  int c, status, result;
  bool logopen = false;
  const char *errmsg;
  char buf[30];
  bool dump = false;
  string mod_filespec, search;
  PVPanels pv;
  pvpanel_t *entry;
  
  while ((c = getopt (argc, argv, "dhvs:l:m:")) != -1) {
    switch (c) {
    case 'd':
      dump = true;        
      break;
      
    case 'l':
      logopen = true;
      //      dbglog.Open (optarg);
      break;
      
    case 'm':
      mod_filespec = optarg;
      break;
      
    case 's':
      search = optarg;
      break;
      
    case 'h':
      usage (argv[0]);
      break;
      
    case 'v':
      //      dbglog.set_verbosity();
      cout << "Verbose output turned on" << endl;
      break;
      break;
      
    default:
      usage (argv[0]);
      break;
    }
  }
  
  if (!logopen)
    //    dbglog.Open (DEFAULT_LOGFILE);

  if (mod_filespec.size() == 0)
    {
      mod_filespec = "/home/rob/projects/gnu/gnuae/data/Modules.csv";
    }

  cout << "Using " << mod_filespec << " for PV Modules data file" << endl;

  //  if (optind + 1 != argc)
  //  usage (argv[0]);

  if (pv.readModuleDataCSV(mod_filespec)) {
    
  } else {
    cerr << "Couldn't open PV module data file " << mod_filespec << endl;
  }  
  
  // Dump the data in the data base
  if (dump)
    {
      pv.dump();
    }

  // Search the database for all entries that match the search string
  if (search.size()) {
    vector<pvpanel_t *>::iterator it;
    vector<pvpanel_t *> *pvary;
    pvary = pv.search(search);

    for (it = pvary->begin(); it != pvary->end(); it++)
      {
        entry = *it;
        pv.dump(entry);
      }
  }
  
}

static void
usage (const char *prog)
{
  fprintf (stderr, "This program ....\n"
           );
  fprintf (stderr, "Usage: %s [dlhv]\n", prog);
  fprintf (stderr, "-h\tHelp\n");
  fprintf (stderr, "-m\tPV Modules data file name\n");
  fprintf (stderr, "-l\tLogfile name\n");
  fprintf (stderr, "-d\tDump PV Modules data\n");
  fprintf (stderr, "-s\tDump a specific model's data\n");
  fprintf (stderr, "-v\tVerbose mode\n");
  exit (-1);
}

// local Variables:
// mode: C++
// indent-tabs-mode: t
// End:
