// 
//   Copyright (C) 2003, 2004, 2005, 2006, 2007, 2008,
//              2009 Free Software Foundation, Inc.
// 
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation; either version 3 of the License, or
// (at your option) any later version.
// 
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
// 
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
// This is generated by autoconf

#include "config.h"

#include <vector>
#include <string>
#include <iostream>
#include <cstdlib>
#include <cmath>

#include "Chargers.h"
#include "Database.h"
#include "log.h"
#include "gnuae.h"

using namespace std;

namespace gnuae {

static LogFile& dbglogfile = LogFile::getDefaultInstance();
static GnuAE& gdata = GnuAE::getDefaultInstance();

Chargers::Chargers()
{

}

Chargers::~Chargers()
{
}

int
Chargers::readCSV(std::string)
{
    DEBUGLOG_REPORT_FUNCTION;
}

int
Chargers::readSQL(Database &db)
{
    // DEBUGLOG_REPORT_FUNCTION;
    if (db.getState() == Database::DBOPENED) {
    	string query = "SELECT * from chargers";
    	vector<vector<string> > *result = db.queryResults(query);
    	vector<vector<string> >::iterator it;
    	for (it=result->begin(); it!=result->end(); ++it) {
    	    charger_t *thisch = new charger_t;
    	    vector<string> &row = *it;
	    if (!row[1].empty()) {
		thisch->name = strdup(row[1].c_str());
	    }
	    if (!row[2].empty()) {
		thisch->manufacturer = strdup(row[2].c_str());
	    }
    	    // thiscent->price = strtof(row[3].c_str(), NULL);
    	    thisch->amperage = strtol(row[4].c_str(), NULL, 0);
    	    thisch->volts_in = strtol(row[5].c_str(), NULL, 0);
    	    thisch->volts_out = strtol(row[6].c_str(), NULL, 0);
    	    thisch->efficiency = strtof(row[7].c_str(), NULL);
    	    thisch->openmax = strtof(row[8].c_str(), NULL);
	    thisch->lcd = static_cast<feature_e>(strtol(row[9].c_str(), NULL, 0));
	    thisch->MPPT = static_cast<feature_e>(strtol(row[10].c_str(), NULL, 0));
	    thisch->PWM = static_cast<feature_e>(strtol(row[11].c_str(), NULL, 0));
	    thisch->tempsensor = static_cast<feature_e>(strtol(row[12].c_str(), NULL, 0));
	    thisch->remote = static_cast<feature_e>(strtol(row[13].c_str(), NULL, 0));
    	    addEntry(thisch);
    	}
	delete result;
    }

    // dbglogfile << "Loaded " << dataSize() << " records from centers table." << endl;

    return dataSize();
}

void
Chargers::dump()
{
    // DEBUGLOG_REPORT_FUNCTION;
    if (!dataSize()) {
    	cerr << "No Charger Controller data in memory." << endl;
    } else {
    	vector<string>::iterator it;
    	auto_ptr<vector<string> > loadnames = dataNames();
    	for (it = loadnames->begin(); it != loadnames->end(); ++it) {
    	    dump(findEntry(*it));
    	}
    }
}

void
Chargers::dump(charger_t *cent)
{
    // DEBUGLOG_REPORT_FUNCTION;
    const char *feature_str[] = {
    	"NONE",
    	"YES",
    	"NO",
    	"OPTIONAL",
    	"DEFAULT"
    };

    cerr << "Charge Controller name is: " << cent->name;
    cerr << ", Manufacturer is: " << cent->manufacturer << endl;
    // cerr << cent->price;
    cerr << "Amperage is: " << cent->amperage;
    cerr << ", Voltage in is: " << cent->volts_in;
    cerr << ", Voltage out is: " << cent->volts_out << endl;
    cerr << "LCD option is: " << feature_str[cent->lcd] << endl;
    cerr << "MPPT option is: " << feature_str[cent->MPPT] << endl;
    cerr << "PWM option is: " << feature_str[cent->PWM] << endl;
    cerr << "Temp Sensor option is: " << feature_str[cent->tempsensor] << endl;
    cerr << "Remote option is: " << feature_str[cent->remote] << endl;
}

} // end of gnuae namespace

// local Variables:
// mode: C++
// indent-tabs-mode: t
// End:
