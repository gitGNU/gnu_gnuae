// 
//   Copyright (C) 2003, 2004, 2005, 2006, 2007, 2008,
//              2009 Free Software Foundation, Inc.
// 
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation; either version 3 of the License, or
// (at your option) any later version.
// 
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
// 
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA

// This is generated by autoconf
#include "config.h"

#include <iostream>

#include "log.h"
#include "gui.h"
#include "gnuae.h"

using namespace std;
using namespace gnuae;

static LogFile& dbglogfile = LogFile::getDefaultInstance();
static GnuAE& gdata = GnuAE::getDefaultInstance();

const char **
gui_list_names(const char *name)
{
    // DEBUGLOG_REPORT_FUNCTION;
    const char **ret = gdata.list_names(name);
    
    return ret;
}

void
gui_init()
{
    // DEBUGLOG_REPORT_FUNCTION;
    dbglogfile.set_verbosity();
    gdata.openDB();
    gdata.loadData();
}

void
gui_add_item(item_t *item)
{
    // DEBUGLOG_REPORT_FUNCTION;
    gdata.addItem(item);
}

item_t **
gui_list_items()
{
    // DEBUGLOG_REPORT_FUNCTION;
    std::vector<item_t *> items = gdata.listItems();
    item_t **result = new item_t *[items.size()+1];    
    std::vector<item_t *>::iterator it;
    int i = 0;
    for (it=items.begin(); it != items.end(); ++it) {
	item_t *ti = *it;
	result[i++] = ti;
    }

    // Terminate the array, since we're not using std::vector
    result[i] = 0;
    return result;
}

// local Variables:
// mode: C++
// indent-tabs-mode: t
// End:
