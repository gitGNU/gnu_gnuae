// 
//   Copyright (C) 2005, 2006, 2007, 2008, 2009, 2010 Free Software Foundation, Inc.
// 
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation; either version 3 of the License, or
// (at your option) any later version.
// 
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
// 
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA

#ifndef __NEC_H__
#define __NEC_H__

// This is generated by autoconf
#include "config.h"

#include "nec_tables.h"

const double ACCEPTABLE_DROP = 3.0;

const double BATTERY_RESISTANCE_12 = 0.0015;
const double BATTERY_RESISTANCE_24 = 0.0030;
const double BATTERY_RESISTANCE_48 = 0.0060;
const double BATTERY_CONTACTS      = 0.0016;
const double INVERTER_CONTACTS     = 0.0004;
const double CIRCUIT_BREAKER       = 0.0020;


#ifdef __cplusplus

#include <string>
#include <vector>
#include <map>

namespace gnuae
{  
  class NEC 
    {
    public:
      NEC(void);
      ~NEC(void);
      double fuseSize(double amperage);
      double breakerSize(double amperage);

      double ampacity(void);
      double ampacity(double amperage);

      double maxCurrent(void);
      double maxCurrent(double amps);

      double overCurrent(double amperage);
      double overCurrent(int strings, double isc);

      // Adjust the volatge based on the temperature
      double crystalCompensation(double temp);
      double crystalCompensation(double voltage, double temp);
      
      double wireDerate(int awg, double temp);
      
      double calcK(int awg, double temp);
      double calcK(int awg, double temp, bool exact);
      double calcK(int awg, double temp, wiretype_t type);
      double calcK(int awg, double temp, wiretype_t type, bool exact);
      double resistance(int awg);
      double resistance(int awg, double temperature);
      double resistance(int awg, double temperature, bool exact);
      double resistance(int awg, double temperature, wiremetal_t type);
      double resistance(int awg, double temperature, wiremetal_t type, bool exact);
      double voltDrop(int awg, int distance, double volts, double amps);
      double voltDrop(int awg, int distance, double volts, double amps, int conductors);
      double voltDrop(int awg, int distance, double volts, double amps, double temp,
                     int conductors);
      double voltDrop(int awg, int distance, double volts, double amps, double temp,
                     int conductors, wiremetal_t type);
      
      double voltLoss(int distance, int awg, double amps);
      double voltLoss(int distance, int awg, double amps, int conductors);
      double voltLoss(int distance, int awg, double amps, double temp, int conductors);
      double voltLoss(int distance, int awg, double amps, double temp, int conductors,
                      wiremetal_t type);
      int findGauge(int distance, double volts, double amps);
      int findGauge(int distance, double volts, double amps, int conductors);
      int findGauge(int distance, double volts, double amps, double temp, int conductors);
      int findGauge(int distance, double volts, double amps, double temp, double drop);
      int findGauge(int distance, double volts, double amps, double temp, double drop,
                    int conductors);
      int findGauge(int distance, double volts, double amps, double temp, double drop,
                    int conductors, wiremetal_t type);
      int findGround(double volts, double amps);
      
      double findConduit(int awg);
      double findConduit(int awg, int conductors);
      double findConduit(int awg, int conductors, wiretype_t wire,
                        conduit_type_t conduit);
      
      int awgPV2PV(int distance, double volts, double amps, double temp,
                   int conductors);
      int awgPV2Combiner(int distance, double volts, double amps, double temp,
                         int conductors);
      int awgCombiner2Charger(int distance, double volts, double amps, double temp,
                              int conductors);
      int awgWind2Charger(int distance, double volts, double amps, double temp,
                          int conductors);
      int awgCharger2Battery(int distance, double volts, double amps, double temp,
                             int conductors);
      
      int awgBattery2Inverter(int distance, double volts, double amps, double temp,
                              int conductors);

      double wireAmpacity(int awg, int temp, int conductors, bool conduit,
                         wiretype_t type);
      
      // These are just convienince methods for basic calculations
      double watts(double volts, double amps);
      double amps(double watts, double volts);
      double volts(double watts, double amps);

      double celcius(double temp);
      double farenheit(double temp);
      
      void dump(void);
      void toggleDebug(bool val);
      void toggleExact(bool val);

      // Accessors. 
      void setWireMetalTypeAsDefault(wiremetal_t x)
        {
          _wiremetal = x;
        }
      void setWireTypeAsDefault(wiretype_t x)
        {
          _wiretype = x;
        }
      
      void setConduitTypeAsDefault(conduit_type_t x)
        {
          _conduit = x;
        }
      
      void setCelciusAsDefault(void)
        {
          _celcius = true;
        }
      
      void setFarenheitAsDefault(void)
        {
          _celcius = false;
        }

      bool getTemperatureDefault(void)
        {
          return _celcius;
        }

      wiretype_t getWireTypeDefault(void)
        {
          return _wiretype;
        }
      
      wiremetal_t getWireMetalDefault(void)
        {
          return _wiremetal;
        }
      
      conduit_type_t getConduitTypeDefault(void)
        {
          return _conduit;
        }
      
    private:
      bool           _debug;
      bool           _coated;
      bool           _exact;
      bool           _celcius;
      wiretype_t     _wiretype;
      wiremetal_t    _wiremetal;
      conduit_type_t _conduit;
    };
}

extern "C" {
#else
  void nec_toggle_debug(int val);
  double nec_volt_drop(int awg, int distance, double volts, double amps,
                      double temp, int conductors);
  double nec_volt_loss(int distance, int awg, double amps, double temp,
                      int conductors);
  double nec_watts(double volts, double amps);
  double nec_amps(double watts, double volts);
  double nec_volts(double watts, double amps);
  double nec_resistance(int awg, double temp);

  double nec_wire_derate(int awg, double temp);
  double nec_ampacity(double amps);
  double nec_crystal_comp(double temp);

  double nec_over_current(int strings, double isc);
  int nec_find_gauge(int distance, double volts, double amps, double temp,
                     int conductors);
  double nec_find_conduit(int awg, int conductors, wiretype_t wire,
                         conduit_type_t conduit);
  int nec_find_ground();
  
  int nec_awg_pv2pv(int distance, double volts, double amps, double temp,
                    int conductors);
  int nec_awg_pv2combiner(int distance, double volts, double amps, double temp,
                          int conductors);
  int nec_awg_combiner2charger(int distance, double volts, double amps, double temp,
                               int conductors);
  int nec_awg_wind2charger(int distance, double volts, double amps, double temp,
                           int conductors);
  int nec_awg_charger2battery(int distance, double volts, double amps, double temp,
                              int conductors);
  
  int nec_awg_battery2inverter(int distance, double volts, double amps, double temp,
                               int conductors);  
  double nec_wire_ampacity(int awg, int temp, int conductors, int conduit,
                          wiretype_t type);
  
#endif
#ifdef __cplusplus
}
#endif

// __NEC_H__
#endif

// local Variables:
// mode: C++
// indent-tabs-mode: t
// End:
