// 
//   Copyright (C) 2009 Free Software Foundation, Inc.
// 
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation; either version 3 of the License, or
// (at your option) any later version.
// 
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
// 
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA

#ifndef __DATABASE_H__
#define __DATABASE_H__

// This is generated by autoconf
#ifdef HAVE_CONFIG_H
#include "config.h"
#endif

#include <iostream> 
#include <string>
#include <list>
#include <iomanip> 
#include <vector>

//#include "database.h"

#ifdef HAVE_MYSQL
#include <mysql/errmsg.h>
#include <mysql/mysql.h>
#else
#error "You need to install MySQL!"
#endif

// This shuts up warnings about these constants not being used.
#pragma GCC system_header

namespace gnuae 
{

static const char *DBTABLE = "gnuae";
static const char *DBNAME  = "gnuae";
static const char *DBUSER  = "gnuae";
static const char *DBPASS  = "gnuae";
static const char *DBHOST  = "localhost";

class Database
{
 public:
  typedef enum {NODB, DBDATABASE, DBPGSQL, DBODBC, DBGDBM, DBSTL} dbtype_e;
  typedef enum {DBCLOSED, DBOPENED} dbstate_e;
  Database();
  ~Database();
  
  bool openDB();
  bool openDB(std::string &host, std::string &user, std::string &passwd);
  bool closeDB();
// bool queryInsert(const char *query);
  std::vector<std::vector<std::string> > *queryResults(std::string &query);
  char *gettime();

  // Accessors
  void dbUserSet(std::string user);
  void dbPasswdSet(std::string passwd);
  void dbNameSet(std::string name);
  void dbHostSet(std::string host);

  dbstate_e getState() { return _state; };
  MYSQL &getMySQL() { return _mysql; };

  void dump();
 private:
  dbstate_e     _state;
  dbtype_e      _dbtype;
  int           _dbport;
  std::string   _dbuser;
  std::string   _dbpasswd;
  std::string   _dbhost;
  std::string   _dbname;
  std::string   _tblname;
  MYSQL         *_connection;
  MYSQL         _mysql;
};

} // end of gnuae namespace

// __DATABASE_H__
#endif

// local Variables:
// mode: C++
// indent-tabs-mode: t
// End:
